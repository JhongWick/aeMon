@model Entities.Target

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
<!--filepond-->
<link rel="stylesheet" href="~/plugins/filepond/dist/filepond.min.css" asp-append-version="true" />
<link rel="stylesheet" href="~/plugins/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css" asp-append-version="true" />

<form method="post">
    @Html.AntiForgeryToken()
    <div class="box box-primary">
        <div class="box-header with-border">
            <h2 class="box-title">Create</h2>
         
        </div>
        <!-- /.box-header -->
        <div class="box-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>Description</label>
                        <textarea id="Description" name="Description" rows="10" cols="80" required></textarea>
                        @*<input type="text" class="form-control pull-right " id="Year" required>*@

                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label>Year Covered</label>

                        <div class="input-group">
                            @Html.DropDownList("YearStart", new SelectList(@ViewBag.Year), "-- Select Year --", new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(model => model.YearStart, "", new { @class = "text-danger" })
                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                            @Html.DropDownList("YearEnd", new SelectList(@ViewBag.Year), "-- Select Year --", new { @class = "form-control", required = "required" })
                            @Html.ValidationMessageFor(model => model.YearEnd, "", new { @class = "text-danger" })
                        </div>




                    </div>
                    <div class="form-group">
                        <label>Target Volume Production (Metric Tonne)</label>
                        <div class="input-group ">
                            <div class="input-group-addon">
                                <i class="fa fa-bullseye"></i>
                            </div>
                            @Html.EditorFor(model => model.MetricTonne, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "in Metric Tonne", type = "number" } })
                            @*<input type="text" class="form-control pull-right " id="Year" required>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.MetricTonne, "", new { @class = "text-danger" })

                    </div>
                    <div class="form-group">
                        <label>Farmers</label>
                        <div class="input-group ">
                            <div class="input-group-addon">
                                <i class="fa fa-users"></i>
                            </div>
                            @Html.EditorFor(model => model.Farmers, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "type here", type = "number" } })
                            @*<input type="text" class="form-control pull-right " id="Year" required>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.Farmers, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <label>Trees</label>
                        <div class="input-group ">
                            <div class="input-group-addon">
                                <i class="fa fa-tree"></i>
                            </div>
                            @Html.EditorFor(model => model.Trees, new { htmlAttributes = new { @class = "form-control", required = "required", placeholder = "type here", type = "number" } })
                            @*<input type="text" class="form-control pull-right " id="Year" required>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.Trees, "", new { @class = "text-danger" })

                    </div>

                </div>
                <div class="col-md-4">
                    @*<div class="form-group">
                        <label>Choose file</label>
                        <input asp-for="FileStorageId"
                               value="@Model.FileStorageId"
                               type="file"
                               id="fileUploader"
                               data-max-file-size="15MB"
                               data-max-files="1"
                               data-file-metadata-dict="intranet"
                               accept="image/png, image/jpeg, image/jpg, image/bmp" />
                        @if (TempData["FileMsg"] != null)
                        {
                            @Html.ValidationMessageFor(model => model.FileStorageId, "", new { @class = "text-danger", value = @TempData["FileMsg"] })

                        }
                    </div>*@
                    <div class="form-group">
                        <label>RegionI</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionI, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionI, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionII, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionIII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionIII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionIII, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionIVa</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionIVa, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionIVa, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionIVb</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionIVb, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionIVb, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionV</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionV, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionV, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionVI</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionVI, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionVI, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionVII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionVII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionVII, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionVIII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionVIII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionVIII, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>RegionIX</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionIX, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionIX, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label>RegionX</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionX, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionX, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionXI</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionXI, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionXI, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionXII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionXII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionXII, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>RegionXIII</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionXIII, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionXIII, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>Region NCR</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionNCR, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionNCR, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>Region CAR</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionCAR, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionCAR, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label>Region ARMMM</label>
                        <div class="input-group">
                            <div class="input-group-addon">
                                <i class="fa fa-percent"></i>
                            </div>
                            @Html.EditorFor(model => model.RegionARMMM, new { htmlAttributes = new { @class = "form-control ", required = "required", placeholder = "type here", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.RegionARMMM, "", new { @class = "text-danger" })
                    </div>
                </div>
                <!-- /.col -->
            </div>
            <!-- /.row -->
        </div>
        <!-- /.box-body -->
        <div class="box-footer">
            <button type="button" id="KPIbutton" class="btn btn-primary"><i class="fa fa-send"></i>&nbsp;&nbsp;Submit</button>
            <button type="submit" style="" id="btnSubmit"/>

            <a href="@Url.Action("Index", "Targets")" class="btn btn-warning"><i class="fa fa-list"></i>&nbsp;&nbsp;Back to List</a>
        </div>
    </div>
    <!-- /.box -->
</form>

<!--filepond-->
<script src="~/plugins/filepond/dist/filepond.min.js"></script>

<script src="~/plugins/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.js"></script>

<script src="~/plugins/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.min.js"></script>
<script src="~/plugins/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.min.js"></script>
<script src="~/plugins/filepond-plugin-file-metadata/dist/filepond-plugin-file-metadata.min.js"></script>
<script src="~/plugins/filepond-plugin-file-rename/dist/filepond-plugin-file-rename.min.js"></script>
<script src="~/plugins/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.min.js"></script>

<script src="~/plugins/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.min.js"></script>
<script src="~/plugins/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.min.js"></script>

<script language="JavaScript" type="text/javascript">
    //$(document).ready(function () {

    //    var pond = FilePond.create(
    //        document.querySelector('#fileUploader')
    //    );
    //    pond.on('addfile', (error, file) => {
    //        console.log('File added');
    //    });

    //});
    //FilePond.registerPlugin(
    //    FilePondPluginFileMetadata,
    //    FilePondPluginFileRename,
    //    FilePondPluginImagePreview,
    //    FilePondPluginImageExifOrientation,
    //    FilePondPluginFileValidateSize,
    //    FilePondPluginFileValidateType,
    //    FilePondPluginImageResize,
    //    FilePondPluginImageValidateSize
    //);
    //FilePond.setOptions({
    //    server: {
    //        process: '/File/Process',
    //        revert: '/File/Revert',
    //        restore: '/File/Restore',
    //        load: '/File/Load',
    //        fetch: null,
    //        method: 'POST',
    //        timeout: 10000,
    //    }
    //});

    $(function () {
        CKEDITOR.replace('Description')
        $("#Description").text('"sample text: this will be displayed on the dashboard GOAL panel"');
    })

    $("#btnSubmit").click(function () {
        alert('awdawdawd');
    })
    $("#YearEnd").change(function () {
        var start = $("#YearStart").val();
        var end = $("#YearEnd").val();
        $.ajax({
            type: 'GET',
            url: '/targets/checkYear',
            data: { year: end },
            contentType: 'application/json; charset=utf-8',
            dataType: "json",

            success: function (response) {

                if (response.result) {
                    Swal.fire({
                        title: '<strong><h2>System ALert</h2></strong>',
                        html: '<h4>Year is already Covered in existing KPI Targets or Year is ahead before the initial <b>ROAD MAP PLAN</b></h4>',
                        type: 'info',
                        confirmButtonText: 'OK'
                    })
                    
                    $("#YearEnd").val('');

                } else {
                    if (start != "") {
                        if (end < start) {
                            Swal.fire({
                                title: '<strong><h2>System ALert</h2></strong>',
                                html: '<h4>Year End should be further than Year started! change year</h4>',
                                type: 'info',
                                confirmButtonText: 'OK'
                            })
                            
                            $("#YearEnd").val('');
                        }

                    }
                }

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                Swal.fire({
                    type: 'error',
                    title: 'Oops...',
                    text: errorThrown,
                   
                })
                
            }
        })


    });
    $("#YearStart").change(function () {




        var start = $("#YearStart").val();
        var end = $("#YearEnd").val();

        $.ajax({
            type: 'GET',
            url: '/targets/checkYear',
            data: { year: start },
            contentType: 'application/json; charset=utf-8',
            dataType: "json",

            success: function (response) {

                if (response.result) {
                    Swal.fire({
                        title: '<strong><h2>System ALert</h2></strong>',
                        html: '<h4>Year is already Covered in existing KPI Targets or Year is ahead before the initial <b>ROAD MAP PLAN<b></h4>',
                        type: 'info',
                        confirmButtonText: 'OK'
                    })
                    
                    $("#YearStart").val('');

                } else {
                    if (end != "") {
                        if (start > end) {
                            Swal.fire({
                                title: '<strong><h2>System ALert</h2></strong>',
                                html: '<h4>Year start should be earlier than Year end! change year</h4>',
                                type: 'info',
                                confirmButtonText: 'OK'
                            })

                            $("#YearStart").val('');
                        }
                    }
                }

            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                Swal.fire({
                    type: 'error',
                    title: 'Oops...',
                    text: errorThrown,
                    
                })
            }
        })




    });






</script>

